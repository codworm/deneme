
; /* Start:"a:4:{s:4:"full";s:106:"/local/components/sb/features.table.bitrix24/templates/default.features.table.v3/script.js?166213137615000";s:6:"source";s:90:"/local/components/sb/features.table.bitrix24/templates/default.features.table.v3/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
;(function() {
	'use strict';

	const namespace = BX.namespace('SB.B24Manager.FeatureTableBitrix24');
	namespace.EVENT_LOAD = 'sb.features.table.bitrix24:load';

	namespace.Loader = class Loader {
		constructor(parameters) {
			parameters = parameters || {};
			if (parameters.nodeId)
			{
				this.node = document.querySelector('[data-sb-feature-table-lazy-place=\'' + parameters.nodeId + '\']');
			}

			this.componentName = parameters.componentName;
			this.componentAction = parameters.componentAction;
			this.signedParameters = parameters.signedParameters;
			this.loadAttemptsCount = 0;
			if (this.node && this.componentName && this.componentAction && this.signedParameters)
			{
				this.checkPosition();
				this.scrollHandlerFunction = this.scrollHandler.bind(this);
				BX.bind(window, 'scroll', this.scrollHandlerFunction);
				this.checker = setInterval(this.checkPosition.bind(this), 1000);
			}
		}

		scrollHandler() {
			clearTimeout(this.timer);
			this.timer = setTimeout(this.checkPosition.bind(this));
		}

		checkPosition() {
			const bottomBorderPlace = BX.GetWindowScrollPos().scrollTop + BX.GetWindowInnerSize().innerHeight;
			const placePos = BX.pos(this.node);
			//additional range between bottom window border and node to download table earlier
			const shiftInPixels = 1000;
			if (bottomBorderPlace > placePos.top - shiftInPixels)
			{
				this.loadTable();
			}
		}

		loadTable() {
			if (!this.isLoading && !this.isLoaded && !this.isLoadError)
			{
				this.isLoading = true;
				this.loadAttemptsCount++;
				BX.ajax.runComponentAction(
					this.componentName,
					this.componentAction,
					{
						mode: 'class',
						signedParameters: this.signedParameters,
					}
				).then(this.successLoadHandler.bind(this)).catch(this.failureLoadHandler.bind(this));
			}
		}

		successLoadHandler(response) {
			this.isLoading = false;
			if (response && response.data && response.data.html && this.node.parentNode)
			{
				this.loaded = true;
				const div = document.createElement('div');
				div.innerHTML = response.data.html;
				let childNode = div.children[0];
				let index = 0;
				const animationNodes = [];
				while (childNode && index < 10000)
				{
					this.node.parentNode.insertBefore(childNode, this.node);
					if (childNode)
					{
						childNode.style.opacity = 0;
						childNode.style.transition = '0.3s opacity ease-in';
						animationNodes.push(childNode);
					}
					childNode = div.children[0];
					index++;
				}
				this.node.parentNode.removeChild(this.node);
				BX.onCustomEvent(namespace.EVENT_LOAD);
				setTimeout(function() {
					for (let i = 0; i < animationNodes.length; i++)
					{
						const animationNode = animationNodes[i];
						animationNode.style.opacity = 1;
					}
				}, 1);
				this.unbindEvents();
			}
			else
			{
				this.failureLoadHandler();
			}
		}

		failureLoadHandler() {
			this.isLoading = false;
			if (this.loadAttemptsCount >= 3)
			{
				this.isLoadError = true;
				this.unbindEvents();
			}
		}

		unbindEvents() {
			clearInterval(this.checker);
			BX.unbind(window, 'scroll', this.scrollHandlerFunction);
			delete this.scrollHandlerFunction;
		}
	};

	let FeatureSwitch = function(object) {
		if (!BX.type.isNotEmptyObject(object))
		{
			return;
		}

		this.base = object;

		this.isEqualEnabled = false;

		this.nodes = {
			table: null,
			switch: {
				selector: [],
				selectorAll: [],
				selectorEqual: [],
				slider: []
			},
			list: {
				content: null,
				sections: {},
			}
		};

		this.attributes = {
			switch: {
				selector: 'data-sb-feature-switch',
				selectorAll: 'data-sb-feature-switch-all',
				selectorEqual: 'data-sb-feature-switch-equal',
				slider: 'data-sb-feature-switch-runner'
			},
			list: {
				content: 'data-sb-feature-list',
				section: 'data-sb-feature-list-section',
				selector: 'data-sb-feature-list-selector',
				selectorAll: 'data-sb-feature-list-selector-all',
				sectionCode: 'data-sb-feature-section-code',
				subsectionCode: 'data-sb-feature-subsection-code',
			}
		};

		this.classes = {
			equal: 'equal',
			checked: 'checked',
			sectionHidden: 'section-hidden',
			subsectionHidden: 'subsection-hidden',
			allSectionsShown: 'sections-shown',
		};

		if (BX.type.isElementNode(this.base.nodes.main))
		{
			this.nodes.table = this.base.nodes.main;

			this.init();
		}
	}

	FeatureSwitch.prototype = {
		toggleEqual: function() {
			if (this.isEqualEnabled)
			{
				this.disableEqual();
			}
			else
			{
				this.enableEqual();
			}
		},
		enableEqual: function() {
			for (let i in this.nodes.switch.slider)
			{
				BX.addClass(this.nodes.switch.slider[i], this.classes.checked);
			}

			BX.addClass(this.nodes.table, this.classes.equal);
			this.isEqualEnabled = true;
		},
		disableEqual: function() {
			for (let i in this.nodes.switch.slider)
			{
				BX.removeClass(this.nodes.switch.slider[i], this.classes.checked);
			}

			BX.removeClass(this.nodes.table, this.classes.equal);
			this.isEqualEnabled = false;
		},
		bindSwitch: function() {
			let slider = this.nodes.table.querySelectorAll('[' + this.attributes.switch.slider + ']');
			for (let i in slider)
			{
				if (BX.type.isElementNode(slider[i]))
				{
					BX.bind(slider[i], 'click', BX.delegate(this.toggleEqual, this));
					this.nodes.switch.slider.push(slider[i]);
				}
			}

			let selectorAll = this.nodes.table.querySelectorAll('[' + this.attributes.switch.selectorAll + ']');
			for (let i in selectorAll)
			{
				if (BX.type.isElementNode(selectorAll[i]))
				{
					BX.bind(selectorAll[i], 'click', BX.delegate(this.disableEqual, this));
					this.nodes.switch.selectorAll.push(selectorAll[i]);
				}
			}

			let selectorEqual = this.nodes.table.querySelectorAll('[' + this.attributes.switch.selectorEqual + ']');
			for (let i in selectorEqual)
			{
				if (BX.type.isElementNode(selectorEqual[i]))
				{
					BX.bind(selectorEqual[i], 'click', BX.delegate(this.enableEqual, this));
					this.nodes.switch.selectorEqual.push(selectorEqual[i]);
				}
			}
		},
		initSwitch: function() {
			this.bindSwitch();
		},
		getListSectionItems: function(code) {
			let params = { attrs: {} };
			params['attrs'][this.attributes.list.subsectionCode.toString()] = code;

			return BX.findChildren(
				this.nodes.list.content,
				params,
				true
			) || [];
		},
		listSectionShowAllToggle: function() {
			let isShown = BX.hasClass(this.nodes.table, this.classes.allSectionsShown);
			for (let code in this.nodes.list.sections)
			{
				if (isShown)
				{
					this.listSectionHide(code);
				}
				else
				{
					this.listSectionShow(code);
				}
			}

			if (isShown)
			{
				BX.removeClass(this.nodes.table, this.classes.allSectionsShown);
			}
			else
			{
				BX.addClass(this.nodes.table, this.classes.allSectionsShown);
			}
		},
		listSectionToggle: function(code) {
			if (this.nodes.list.sections.hasOwnProperty(code))
			{
				if (BX.hasClass(this.nodes.list.sections[code], this.classes.sectionHidden))
				{
					this.listSectionShow(code);
				}
				else
				{
					this.listSectionHide(code);
				}
			}
		},
		listSectionShow: function(code) {
			let list = this.getListSectionItems(code);

			for (let i in list)
			{
				BX.removeClass(list[i], this.classes.subsectionHidden);
			}

			BX.removeClass(this.nodes.list.sections[code], this.classes.sectionHidden);
		},
		listSectionHide: function(code) {
			let list = this.getListSectionItems(code);

			for (let i in list)
			{
				BX.addClass(list[i], this.classes.subsectionHidden);
			}

			BX.addClass(this.nodes.list.sections[code], this.classes.sectionHidden);
		},
		bindList: function() {
			let section = this.nodes.list.content.querySelectorAll('[' + this.attributes.list.section + ']');

			for (let i in section)
			{
				if (BX.type.isElementNode(section[i]))
				{
					let currentSection = section[i];
					let selector = currentSection.querySelector('[' + this.attributes.list.selector + ']') || null;

					if (BX.type.isElementNode(selector))
					{
						let sectionCode = currentSection.getAttribute(this.attributes.list.sectionCode);

						this.nodes.list.sections[sectionCode] = currentSection;

						let _this = this;
						BX.bind(selector, 'click', function() {
							_this.listSectionToggle(sectionCode);
						});
					}
				}
			}

			let selectorShowAll = this.nodes.table.querySelectorAll('[' + this.attributes.list.selectorAll + ']');
			for (let i in selectorShowAll)
			{
				let currentSelector = selectorShowAll[i];

				let _this = this;
				BX.bind(currentSelector, 'click', BX.delegate(_this.listSectionShowAllToggle, _this));
			}
		},
		initList: function() {
			this.nodes.list.content = this.nodes.table.querySelector('[' + this.attributes.list.content + ']') || null;

			if (BX.type.isElementNode(this.nodes.list.content))
			{
				this.bindList();
			}
		},
		init: function() {
			this.initList();
			this.initSwitch();
		},
	};

	let FeatureTooltip = function(object) {
		if (!BX.type.isNotEmptyObject(object))
		{
			return;
		}

		this.base = object;

		this.attributes = {
			data: 'data-sb-tooltip-data',
			opened: 'data-sb-tooltip-opened',
		};

		this.classes = {
			hover: 'bx-sb-b24-price-table-tooltip-hover',
			tooltip: 'bx-sb-b24-price-table-tooltip',
			content: 'bx-sb-b24-price-table-tooltip__content',
		};

		if (!BX.type.isElementNode(this.base.nodes.main))
		{
			return;
		}

		let tooltips = this.base.nodes.main.querySelectorAll('[' + this.attributes.data + ']');
		for (let i = 0; i < tooltips.length; i++)
		{
			let tooltip = tooltips[i];
			let data = tooltip.getAttribute(this.attributes.data);

			try
			{
				data = JSON.parse(data) || {};
				if (!!data.message)
				{
					this.render({ node: tooltip, data: data })
				}
			} catch (exception)
			{

			}
		}
	};

	FeatureTooltip.prototype = {
		calcAngelPosition: function() {
		},
		closeHandler: function(element, initializer, event) {
			event = event || document.event;

			if (!initializer.contains(event.target) && !element.contains(event.target))
			{
				this.close(element, initializer);
			}
		},
		close: function(element, initializer) {
			element.removeAttribute(this.attributes.opened);

			BX.unbind(document.body, 'click', BX.proxy(function(event) {
				this.closeHandler(element, initializer, event);
			}, this));
		},
		open: function(element, initializer, icon) {
			element.setAttribute(this.attributes.opened, true);

			if (!!icon)
			{
				let positionInitializer = BX.pos(initializer, false);
				let positionTooltip = BX.pos(element, false);

				let diffLeft = positionInitializer.left - positionTooltip.left;
				diffLeft = diffLeft >= 1 ? diffLeft : 0;

				let position = BX.pos(icon, true);
				let left = (diffLeft + position.left - (position.width / 2) - 2);
				element.style.setProperty('--tooltip-angel-left', left + 'px');
			}

			BX.bind(document.body, 'click', BX.proxy(function(event) {
				this.closeHandler(element, initializer, event);
			}, this));
		},
		render: function(object) {
			let content = BX.create('div', {
				props: {
					className: this.classes.content,
				},
				html: object.data.message,
			});

			let tooltip = BX.create('div', {
				props: {
					className: this.classes.tooltip,
				},
				children: [content],
			});

			BX.insertAfter(tooltip, object.node);

			let hover = BX.create('div', {
				props: {
					className: this.classes.hover,
				},
			});

			BX.append(hover, object.node);

			BX.bind(object.node, 'mouseover', this.open.bind(this, tooltip, object.node, hover));
			BX.bind(object.node, 'mouseout', this.close.bind(this, tooltip, object.node));
		}
	};

	let FeatureSearch = function(object) {
		if (!BX.type.isNotEmptyObject(object))
		{
			return;
		}

		this.base = object;

		this.nodes = {
			sections: [],
		};

		this.attributes = {
			search: 'data-sb-section-search',
			selected: 'data-sb-selected',
		};

		BX.addCustomEvent('BX.SB.Price.Select:onSelect', BX.delegate(function(event) {
			this.selectEventHandler(event);
		}, this));
	};

	FeatureSearch.prototype = {
		isFilterMatch: function(filter, search) {
			if (!(Object.keys(filter).length > 0 || Object.keys(search).length > 0))
			{
				return false;
			}

			if (Object.keys(filter).length === 0)
			{
				return true;
			}

			if (Object.keys(filter).length > Object.keys(search).length)
			{
				return false;
			}

			let match = 0;
			for (let field in filter)
			{
				if (!search.hasOwnProperty(field))
				{
					continue;
				}

				if (filter[field].toString() !== search[field].toString())
				{
					continue;
				}

				match = match + 1;
			}

			return Object.keys(filter).length === match;
		},
		unselectAll: function(event) {
			let sections = this.getSections();
			sections = Array.prototype.slice.call(sections);
			sections.forEach(function(section) {
				if (section.hasAttribute(this.attributes.selected))
				{
					let search = section.getAttribute(this.attributes.search) || '{}';

					try
					{
						search = JSON.parse(search) || {};
						for (let field in event.filter)
						{
							if (field !== 'code' && search.hasOwnProperty(field))
							{
								section.removeAttribute(this.attributes.selected);
							}
						}
					} catch (exception)
					{

					}
				}
			}.bind(this));
		},
		select: function(filter) {
			let sections = this.getSections();
			sections = Array.prototype.slice.call(sections);
			sections.forEach(function(section) {
				let select = true;
				let search = section.getAttribute(this.attributes.search) || '{}';

				try
				{
					select = this.isFilterMatch(filter, JSON.parse(search) || {});
				} catch (exception)
				{

				}

				if (select)
				{
					section.setAttribute(this.attributes.selected, 'true');
				}
			}.bind(this));
		},
		selectEventHandler: function(event) {
			if (typeof event === 'undefined')
			{
				return;
			}

			this.unselectAll({ filter: event.filter || {} });
			this.select(event.filter || {});
		},
		getSections: function() {
			return this.base.nodes.main.querySelectorAll('[' + this.attributes.search + ']');
		},
	};

	function ApplicationFeatureTableLoader()
	{
		let sections = document.querySelectorAll('[data-sb-feature-table]');

		for (let i = 0; i < sections.length; i++)
		{
			let section = sections[i];
			if (!section._sb)
			{
				section._sb = {};
			}
			if (!section._sb.FeatureSwitch)
			{
				section._sb.FeatureSwitch = new FeatureSwitch({nodes: {main: section}});
			}
			if (!section._sb.FeatureTooltip)
			{
				section._sb.FeatureTooltip = new FeatureTooltip({nodes: {main: section}});
			}
			if (!section._sb.FeatureSearch)
			{
				section._sb.FeatureSearch = new FeatureSearch({nodes: {main: section}});
			}
		}
	}

	if (window.frameCacheVars !== undefined)
	{
		BX.addCustomEvent('onFrameDataReceived', function() {
			ApplicationFeatureTableLoader();
		});
	}
	else
	{
		BX.ready(function() {
			ApplicationFeatureTableLoader();
		});
	}
	BX.addCustomEvent(namespace.EVENT_LOAD, function() {
		ApplicationFeatureTableLoader();
	});
})();
/* End */
;; /* /local/components/sb/features.table.bitrix24/templates/default.features.table.v3/script.js?166213137615000*/
